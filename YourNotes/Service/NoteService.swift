//
//  NoteService.swift
//  YourNotes
//
//  Created by alexander on 7.04.25.
//

// NoteService.swift
import Foundation
import SwiftData

enum NoteFactory {
    static func createNoteService(context: ModelContext) -> NoteServiceProtocol {
        #if DEBUG
        print("üõ† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MockUserService (DEBUG)")
        return MockNoteService()
        #else
        print("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è UserService (RELEASE)")
        return NoteService(context: context)
        #endif
    }
}

protocol NoteServiceProtocol {
    func fetchNote(by id: String) -> Note?  /// –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ `noteID`
    func fetchAllNotes() -> [Note] /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    func createNote(_ note: Note) /// –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
    func updateNote(by id: String, with newNote: Note) /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É –ø–æ `noteID`
    func deleteNote(by id: String) /// –£–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ `noteID`
}

final class NoteService: NoteServiceProtocol {
    private let context: ModelContext

    init(context: ModelContext) {
        self.context = context
    }

    func fetchNote(by id: String) -> Note? {
        do {
            let descriptor = FetchDescriptor<Note>(predicate: #Predicate { $0.noteID == id })
            let notes = try context.fetch(descriptor)
            return notes.first
        } catch {
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID: \(error.localizedDescription)")
            return nil
        }
    }

    func fetchAllNotes() -> [Note] {
        do {
            let descriptor = FetchDescriptor<Note>(sortBy: [SortDescriptor(\.dateCreate, order: .reverse)])
            return try context.fetch(descriptor)
        } catch {
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫: \(error.localizedDescription)")
            return []
        }
    }

    func createNote(_ note: Note) {
        context.insert(note)
        do {
            try context.save()
            print("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
        } catch {
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: \(error.localizedDescription)")
        }
    }

    func updateNote(by id: String, with newNote: Note) {
        guard let existingNote = fetchNote(by: id) else {
            print("‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ —Å ID \(id) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        }
        
        // –í–æ—Ç —Ç—É—Ç –Ω–∞–¥–æ:
        // 1. –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑ existingNote.noteImagePaths, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ newNote.noteImagePaths
        // 2. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

        // –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è:
        let oldPaths = existingNote.noteImagePaths
        let newPaths = newNote.noteImagePaths

        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–æ–≤—ã—Ö –ø—É—Ç—è—Ö
        for oldPath in oldPaths {
            if !newPaths.contains(oldPath) {
                ImageFileManager.deleteImage(filename: oldPath)
            }
        }
        
        existingNote.noteImages = newNote.noteImages
        existingNote.title = newNote.title
        existingNote.subTitle = newNote.subTitle
        existingNote.isCompleted = newNote.isCompleted
        existingNote.dateCreate = newNote.dateCreate
        existingNote.noteImagePaths = newNote.noteImagePaths

        do {
            try context.save()
            print("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        } catch {
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: \(error.localizedDescription)")
        }
    }

    func deleteNote(by id: String) {
        guard let note = fetchNote(by: id) else {
            print("‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ —Å ID \(id) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        }
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        for filename in note.noteImagePaths {
            ImageFileManager.deleteImage(filename: filename)
            print("–£–¥–∞–ª–µ–Ω—ã —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π \(filename)")
        }
        
        context.delete(note)
        do {
            try context.save()
            print("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        } catch {
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: \(error.localizedDescription)")
        }
    }
}

// Mock —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
final class MockNoteService: NoteServiceProtocol {
    private var mockNotes: [Note] = []

    init() {
        self.mockNotes = [MockDataManager.shared.mockNote()]
    }

    func fetchNote(by id: String) -> Note? {
        return mockNotes.first(where: { $0.noteID == id })
    }

    func fetchAllNotes() -> [Note] {
        return mockNotes.sorted(by: { $0.dateCreate > $1.dateCreate })
    }

    func createNote(_ note: Note) {
        mockNotes.append(note)
        print("‚úÖ (Mock) –ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞.")
    }

    func updateNote(by id: String, with newNote: Note) {
        if let index = mockNotes.firstIndex(where: { $0.noteID == id }) {
            mockNotes[index] = newNote
            print("‚úÖ (Mock) –ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        } else {
            print("‚ö†Ô∏è (Mock) –ó–∞–º–µ—Ç–∫–∞ —Å ID \(id) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é.")
            createNote(newNote)
        }
    }

    func deleteNote(by id: String) {
        if let index = mockNotes.firstIndex(where: { $0.noteID == id }) {
            mockNotes.remove(at: index)
            print("‚úÖ (Mock) –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        } else {
            print("‚ö†Ô∏è (Mock) –ó–∞–º–µ—Ç–∫–∞ —Å ID \(id) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        }
    }
}
